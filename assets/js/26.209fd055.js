(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{595:function(e,t,a){"use strict";a.r(t);var n=a(7),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"一、createelement-用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、createelement-用法"}},[e._v("#")]),e._v(" 一、createElement 用法")]),e._v(" "),a("p",[e._v("一个简单的 "),a("code",[e._v("React.createElement")]),e._v(" 例子：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ReactDOM.render(\n  React.createElement(\n    'div',\n    null,\n    'Hello Bottle' \n  ),\n  document.getElementById('root'),\n);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("p",[a("code",[e._v("React.render")]),e._v(" 与 "),a("code",[e._v("React.createElement")]),e._v(" 是 React 最核心的 API 方法，每一个 React 项目都必须要引入这两个API。")]),e._v(" "),a("h4",{attrs:{id:"reactdom-render"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactdom-render"}},[e._v("#")]),e._v(" ReactDOM.render")]),e._v(" "),a("p",[e._v("这基本上是React应用程序进入浏览器DOM 的"),a("strong",[e._v("入口点")]),e._v("。它有两个参数：")]),e._v(" "),a("ol",[a("li",[e._v("第一个参数是向浏览器呈现的内容。")]),e._v(" "),a("li",[e._v("第二个参数是WHERE在浏览器中呈现React元素。这必须是存在于静态呈现的HTML中的有效DOM节点。。")])]),e._v(" "),a("p",[e._v("什么是React元素？它是描述DOM元素的 Virtual 元素。是 "),a("code",[e._v("React.createElement")]),e._v("API方法返回的内容。")]),e._v(" "),a("h4",{attrs:{id:"react-createelement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-createelement"}},[e._v("#")]),e._v(" React.createElement")]),e._v(" "),a("p",[e._v("在React中，我们不使用字符串来表示DOM元素（如上面的本机DOM示例中），而是使用对方法的调用来表示带有"),a("strong",[e._v("对象的")]),e._v(" DOM元素"),a("code",[e._v("React.createElement")]),e._v("。这些对象称为React元素。")]),e._v(" "),a("p",[e._v("该"),a("code",[e._v("React.createElement")]),e._v("函数有很多参数：")]),e._v(" "),a("ul",[a("li",[e._v("第一个参数是要表示的DOM元素的HTML标记，"),a("code",[e._v("div")]),e._v("在此示例中。")]),e._v(" "),a("li",[e._v("第二个参数为任何属性（如"),a("code",[e._v("id")]),e._v("，"),a("code",[e._v("href")]),e._v("，"),a("code",[e._v("title")]),e._v("，等），我们想要的DOM元素有。"),a("code",[e._v("div")]),e._v("我们使用的简单没有属性，所以我们"),a("code",[e._v("null")]),e._v("在那里使用。")]),e._v(" "),a("li",[e._v("第三个参数是DOM元素的内容。我们在那里放了一个“Hello React”字符串。可选的第三个参数以及它后面的所有可选参数，形成渲染元素的"),a("strong",[e._v("子")]),e._v("列表。元素可以包含0个或更多子元素。")])]),e._v(" "),a("p",[a("strong",[e._v("React元素在内存中创建")]),e._v("。为了实际在DOM中显示一个React元素，我们使用这个"),a("code",[e._v("ReactDOM.render")]),e._v("方法来做很多事情来找出将React元素的状态反映到浏览器中的实际DOM树中的最佳方法。")]),e._v(" "),a("h5",{attrs:{id:"_1-标记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-标记"}},[e._v("#")]),e._v(" 1. 标记")]),e._v(" "),a("p",[e._v("所有我们自定义的 React 元素首字母必须是大写，因为，JSX编译器（如Babel）会将所有以小写字母开头的名称视为HTML元素的名称。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 元素以字符串的形式，传递给 React.createElement 调用\nReact.createElement("input", null)\n// React 元素以变量的形式，传递给 React.createElement 调用\nReact.createElement(Input, null)\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h5",{attrs:{id:"_2-参数-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-参数-属性"}},[e._v("#")]),e._v(" 2. 参数/属性")]),e._v(" "),a("p",[e._v("使用函数组件时，通常我们将属性列表命名为 props（标准做法） ，同时也可以使用解构的方法来编写：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Hello({name}) {\n  return (\n    <div>{name}</div>\n  )\n}\n\nReactDOM.render(\n  <Hello name='Bottle' />\n  document.getElementById('root'),\n);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("p",[e._v("请注意，props 是可选的。有些组件没有 props。但是，组件的返回值是必须的。React 组件不能返回 "),a("code",[e._v("undefined")]),e._v("（显式或隐式）。它必须返回一个值。它可以返回 "),a("code",[e._v("null")]),e._v("以使渲染器忽略其输出。")]),e._v(" "),a("h5",{attrs:{id:"_3-dom-元素的内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-dom-元素的内容"}},[e._v("#")]),e._v(" 3. DOM 元素的内容")]),e._v(" "),a("p",[e._v("可选的第三个参数以及它后面的所有可选参数，形成渲染元素的"),a("strong",[e._v("子")]),e._v("列表。元素可以包含0个或更多子元素。")]),e._v(" "),a("h4",{attrs:{id:"react-createelement-与-react-component"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-createelement-与-react-component"}},[e._v("#")]),e._v(" React.createElement 与 React Component")]),e._v(" "),a("p",[a("code",[e._v("React.createElement")]),e._v(" 是创建一个 React 元素，它与 React 组件 是不同的：")]),e._v(" "),a("ul",[a("li",[e._v("React Component 是一个模板。蓝图。全球定义。它可以是函数组件或类组件。")]),e._v(" "),a("li",[e._v("React 元素是从组件返回的元素。它是一个描述虚拟 DOM 节点的对象。对于函数组件，此元素是函数返回的对象，对于类组件，元素是组件的 render 方法返回的对象。React 元素不是您在浏览器中看到的真实 DOM。它们存储在内存中的 Virtual DOM 对象，你无法改变它们。")])]),e._v(" "),a("p",[e._v("当我们告诉React在浏览器中渲染元素树时，它首先生成该树的虚拟表示并将其保留在内存中以供日后使用。然后它将继续执行DOM操作，使树显示在浏览器中。")]),e._v(" "),a("p",[e._v("当我们告诉React更新它先前渲染的元素树时，它会生成更新树的新虚拟表示。现在React在内存中有2个版本的树！")]),e._v(" "),a("p",[e._v("要在浏览器中呈现更新的树，React不会丢弃已呈现的内容。相反，它将比较它在内存中的2个虚拟版本，计算它们之间的差异，找出主树中需要更新的子树，并且只在浏览器中更新这些子树。")]),e._v(" "),a("p",[e._v("这个过程就是所谓的树协调算法，它使React成为使用浏览器DOM树的一种非常有效的方法。")]),e._v(" "),a("p",[e._v("这是React的智能"),a("strong",[e._v("差异")]),e._v("算法。它只在主DOM树中更新实际"),a("strong",[e._v("需要")]),e._v("更新的内容，同时保持其他所有内容相同。这种差异化过程是可能的，因为它在内存中保留了React的虚拟DOM表示。无论UI视图需要重新生成多少次，React将只向浏览器提供所需的“部分”更新。")])])}),[],!1,null,null,null);t.default=s.exports}}]);