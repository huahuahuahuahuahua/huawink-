(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{593:function(s,e,n){"use strict";n.r(e);var a=n(7),r=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"commonjs模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commonjs模块"}},[s._v("#")]),s._v(" CommonJS模块")]),s._v(" "),n("h2",{attrs:{id:"一、出发点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、出发点"}},[s._v("#")]),s._v(" 一、出发点")]),s._v(" "),n("p",[s._v("主要是为了弥补当前JS没有标准的缺陷，以达到像Python、Ruby和Java具备开发大型应用的基础能力。CommonJS API是以在浏览器环境之外构建 JS 生态系统为目标而产生的项目，比如服务器端JS应用程序、命令行工具、桌面图形界面应用程序等。如今，规范涵盖了模块、二进制、Buffer、字符集编码、I/O流、进程环境、文件系统、套接字，单元测试、Web服务器网管接口、包管理等。")]),s._v(" "),n("h2",{attrs:{id:"二、commonjs的模块规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、commonjs的模块规范"}},[s._v("#")]),s._v(" 二、CommonJS的模块规范")]),s._v(" "),n("p",[s._v("CommonJS对模块的定义主要分为模块引用、模块定义和模块标识3个部分")]),s._v(" "),n("h3",{attrs:{id:"_1-模块引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-模块引用"}},[s._v("#")]),s._v(" 1. 模块引用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var math = require('math')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("在CommonJS规范中，存在一个"),n("code",[s._v("require()")]),s._v("方法，这个方法接收模块标识，一次引入一个模块的API到当前上下文中。")]),s._v(" "),n("h3",{attrs:{id:"_2-模块定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-模块定义"}},[s._v("#")]),s._v(" 2. 模块定义")]),s._v(" "),n("p",[s._v("在模块中，上下文提供"),n("code",[s._v("require()")]),s._v("方法引入外部模块。对应引入的功能，上下文提供一个"),n("code",[s._v("exports")]),s._v("对象导出当前模块的方法或变量，并且它是唯一的导出出口，同时模块中还存在一个"),n("code",[s._v("module")]),s._v("对象，它代表的是当前模块，"),n("code",[s._v("exports")]),s._v("是"),n("code",[s._v("module")]),s._v("的属性。所以，在Node中，一个文件就是一个模块，将方法或属性挂载在"),n("code",[s._v("exports")]),s._v("对象上作为属性即可定义导出的方式。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// math.js\nexports.add = function () {\n    var sum = 0,\n        i = 0,\n        args = arguments,\n        l = args.length\n    while (i < 1) {\n        sum += args[i++]\n    }\n    return sum\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("在其他文件中，通过"),n("code",[s._v("require()")]),s._v("方法引入模块")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// program.js\nvar math = require('math')\nexports.increment =  function (val) {\n    return math.add(val, 1)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"_3-模块标识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-模块标识"}},[s._v("#")]),s._v(" 3. 模块标识")]),s._v(" "),n("p",[s._v("模块标识就是传递给"),n("code",[s._v("require()")]),s._v("方法的参数，采用小驼峰命名，或者以"),n("code",[s._v(".")]),s._v("、"),n("code",[s._v("..")]),s._v("开头的相对路径或绝对路径。它可以不加文件后缀.js。")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://camo.githubusercontent.com/0c9466611aa3d73e93b4ac28e21b6aa04800e4a1b038697431e64105a00d764c/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303138313231313136313032363133392e706e67",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://camo.githubusercontent.com/0c9466611aa3d73e93b4ac28e21b6aa04800e4a1b038697431e64105a00d764c/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303138313231313136313032363133392e706e67",alt:"在这里插入图片描述"}}),n("OutboundLink")],1),s._v("\nCommonJS对模块的定义意义主要在于将类聚的方法或变量等限定在私有的作用域内，同时支持引入和导出功能以顺畅的连接上下游依赖。")]),s._v(" "),n("ul",[n("li",[s._v("模块内所有的变量或方法都运行在模块作用域内，不会污染全局作用域")]),s._v(" "),n("li",[s._v("模块可以多次加载，但每次加载只会运行一次，并将运行结果缓存，以待下次使用，如果想要模块再次运行，则需要清除缓存")]),s._v(" "),n("li",[s._v("模块加载顺序和代码运行顺序一致")])]),s._v(" "),n("p",[s._v("CommonJS构建的这套模块导出或引用机制使得用户完全不必考虑变量污染，命名空间等方案与之相比相形见绌。")]),s._v(" "),n("h2",{attrs:{id:"三、module-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、module-对象"}},[s._v("#")]),s._v(" 三、module 对象")]),s._v(" "),n("h3",{attrs:{id:"_1-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-module"}},[s._v("#")]),s._v(" 1.module")]),s._v(" "),n("p",[s._v("通常一个"),n("code",[s._v("module")]),s._v("有以下几个属性")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("module.id 模块的识别符，通常是带有绝对路径的模块文件名")])]),s._v(" "),n("li",[n("p",[s._v("module.filename 模块文件名，带有绝对路径")])]),s._v(" "),n("li",[n("p",[s._v("module.loaded 返回一个boolean值，标识模块是否已经加载完成")])]),s._v(" "),n("li",[n("p",[s._v("module.parent 返回调用该模块的对象")])]),s._v(" "),n("li",[n("p",[s._v("module.children 返回该模块调用的其他模块数组")])]),s._v(" "),n("li",[n("p",[s._v("module.exports 返回该模块对外的输出")])]),s._v(" "),n("li",[n("p",[s._v("module.paths 模块的搜索路径")]),s._v(" "),n("p",[s._v("例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// math.js\nexports.add = function () {\n    var sum = 0,\n        i = 0,\n        args = arguments,\n        l = args.length\n    while (i < 1) {\n        sum += args[i++]\n    }\n    return sum\n}\nconsole.log(module)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("它的输出是:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Module {\n  id: '/Users/a123/Desktop/Study/wx/server/math.js',\n  exports: { add: [Function] },\n  parent: \n   Module {\n     id: '.',\n     exports: {},\n     parent: null,\n     filename: '/Users/a123/Desktop/Study/wx/server/app.js',\n     loaded: false,\n     children: [ [Module], [Module], [Module], [Module], [Module], [Circular] ],\n     paths: \n      [ '/Users/a123/Desktop/Study/wx/server/node_modules',\n        '/Users/a123/Desktop/Study/wx/node_modules',\n        '/Users/a123/Desktop/Study/node_modules',\n        '/Users/a123/Desktop/node_modules',\n        '/Users/a123/node_modules',\n        '/Users/node_modules',\n        '/node_modules' ] },\n  filename: '/Users/a123/Desktop/Study/wx/server/math.js',\n  loaded: false,\n  children: [],\n  paths: \n   [ '/Users/a123/Desktop/Study/wx/server/node_modules',\n     '/Users/a123/Desktop/Study/wx/node_modules',\n     '/Users/a123/Desktop/Study/node_modules',\n     '/Users/a123/Desktop/node_modules',\n     '/Users/a123/node_modules',\n     '/Users/node_modules',\n     '/node_modules' ] }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("当 Node.js 直接运行一个文件时，"),n("code",[s._v("require.main")]),s._v(" 会被设为它的 "),n("code",[s._v("module")]),s._v("。 这意味着可以通过 "),n("code",[s._v("require.main === module")]),s._v(" 来判断一个文件是否被直接运行：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// node app.js\nmath---require.main === module :  false\napp---require.main === module :  true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])])]),s._v(" "),n("h3",{attrs:{id:"_2-module-exports"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-module-exports"}},[s._v("#")]),s._v(" 2. module.exports")]),s._v(" "),n("p",[s._v("module.exports 对象是由模块系统创建的，表示当前文件对外输出的接口。")]),s._v(" "),n("p",[n("strong",[s._v("注意，对 "),n("code",[s._v("module.exports")]),s._v(" 的赋值必须立即完成。 不能在任何回调中完成。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 创建a.js文件\nconst EventEmitter = require('events')\nmodule.exports = new EventEmitter() // 赋值\n// 处理一些工作，并在一段时间后从模块自身触发 'ready' 事件。\nsetTimeout(() => {\n    module.exports.emit('ready')\n}, 1000)\n// 创建b.js文件\nsetTimeout(() => {\n    module.exports = {a: 'hello'}\n}, 0)\n// app.js 文件中分别调用a、b模块\n\n// 引入a模块\nconst a = require('./a')\na.on('ready', () => {\n    console.log('模块 a 已准备好')\n})\n\n// 引入b模块\nconst b = require('./b')\nconsole.log(b.a)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("执行app.js结果是：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("undefined\n模块 a 已准备好\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_3-exports"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-exports"}},[s._v("#")]),s._v(" 3. exports")]),s._v(" "),n("p",[n("code",[s._v("exports")]),s._v(" 变量是在模块的文件级别作用域内有效的，它在模块被执行前被赋予 "),n("code",[s._v("module.exports")]),s._v(" 的值。")]),s._v(" "),n("p",[s._v("例如： "),n("code",[s._v("module.exports.fun = …")]),s._v("，相当于"),n("code",[s._v("exports.fun = ...")])]),s._v(" "),n("p",[n("strong",[s._v("但注意，不能将一个值赋值给"),n("code",[s._v("exports")]),s._v("，这样它将不在绑定到"),n("code",[s._v("module.exports")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("module.exports.hello = true; // 从对模块的引用中导出\nexports = { hello: false };  // 不导出，只在模块内有效\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_4-module-exports与exports"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-module-exports与exports"}},[s._v("#")]),s._v(" 4. module.exports与exports")]),s._v(" "),n("p",[s._v("在上述介绍中，"),n("code",[s._v("module.exports")]),s._v(" 与"),n("code",[s._v("exports")]),s._v("很容易混淆，下面介绍"),n("code",[s._v("module.exports")]),s._v(" 与"),n("code",[s._v("exports")]),s._v("内部的实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 1. 模块引用\nvar module = require('./a')\nmodule.a // 重要的是 module 这里，module 是 Node 独有的一个变量\n\n// 2. 模块定义\nmodule.exports = {\n    a: 1\n}\n\n// 3.模块内部实现\nfunction require(/* ... */) {\n  const module = {\n    exports: {} // exports 就是一个空对象\n  }\n  // 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了\n  ((module, exports) => {\n    // 模块代码在这\n    var a = 1  // 如果定义了一个函数。则为 function someFunc() {}\n    exports = a;\n    // 此时，exports 不再是一个 module.exports 的快捷方式，\n    // 且这个模块依然导出一个空的默认对象。\n    module.exports = a; // 这个是为什么 exports 和 module.exports 用法相似的原因\n    // 此时，该模块导出 a，而不是默认对象。\n  })(module, module.exports);\n  return module.exports;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h2",{attrs:{id:"四、require"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、require"}},[s._v("#")]),s._v(" 四、require")]),s._v(" "),n("p",[n("code",[s._v("require")]),s._v("命令的功能是，引入模块。")]),s._v(" "),n("p",[n("code",[s._v("require")]),s._v("命令用于加载文件，后缀名默认为"),n("code",[s._v(".js")]),s._v("。")]),s._v(" "),n("p",[n("code",[s._v("require")]),s._v("的加载顺序是：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("以"),n("code",[s._v("/")]),s._v("开头，加载绝对路径模块文件")])]),s._v(" "),n("li",[n("p",[s._v("以"),n("code",[s._v("./")]),s._v("开头，加载相对路径模块文件")])]),s._v(" "),n("li",[n("p",[s._v("除以上两种情况外，加载的是一个默认提供的核心模块（位于Node的系统安装目录中），或者一个位于各级node_modules目录的已安装模块（全局安装或局部安装）。")]),s._v(" "),n("p",[s._v("举例来说，脚本/Users/a123/projects/foo.js"),n("code",[s._v("执行了")]),s._v("require('bar.js')`命令，Node会依次搜索以下文件。")]),s._v(" "),n("ul",[n("li",[s._v("/usr/local/lib/node/bar.js")]),s._v(" "),n("li",[s._v("/Users/a123/projects/node_modules/bar.js")]),s._v(" "),n("li",[s._v("/Users/a123/node_modules/bar.js")]),s._v(" "),n("li",[s._v("/Users/node_modules/bar.js")]),s._v(" "),n("li",[s._v("/node_modules/bar.js")])])]),s._v(" "),n("li",[n("p",[s._v("如果指定的模块文件没有发现，Node会尝试为文件名添加"),n("code",[s._v(".js")]),s._v("、"),n("code",[s._v(".json")]),s._v("、"),n("code",[s._v(".node")]),s._v("后，再去搜索。"),n("code",[s._v(".js")]),s._v("件会以文本格式的JavaScript脚本文件解析，"),n("code",[s._v(".json")]),s._v("文件会以JSON格式的文本文件解析，"),n("code",[s._v(".node")]),s._v("文件会以编译后的二进制文件解析。")])]),s._v(" "),n("li",[n("p",[s._v("如果想得到"),n("code",[s._v("require")]),s._v("命令加载的确切文件名，使用"),n("code",[s._v("require.resolve()")]),s._v("方法。")])])]),s._v(" "),n("p",[s._v("通常，我们会把相关的文件放在一个目录里面，便于组织，这就需要给该目录设置一个入口文件，可以让"),n("code",[s._v("require")]),s._v("方法通过这个入口文件，加载整个目录，例如"),n("code",[s._v("package.json")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n    "name": "wx_backend",\n    "version": "1.0.0",\n    "description": "",\n    "main": "app.js",\n    "scripts": {\n        "start:node-dev": "pm2 start process.prod.json --no-daemon  --env development",\n        "start:node-prod": "pm2 start process.prod.json --no-daemon  --env production",\n        "dev": "nodemon --config nodemon.json app.js",\n        "initdb": "npm install && node tools/initdb.js"\n    },\n...\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("code",[s._v("require")]),s._v("发现参数字符串指向一个目录时，就会自动查看该目录下的"),n("code",[s._v("package.json")]),s._v("文件，然后加载"),n("code",[s._v("main")]),s._v("指定的入口文件，如果"),n("code",[s._v("package.json")]),s._v("中没有"),n("code",[s._v("main")]),s._v("字段，或者根本没有"),n("code",[s._v("package.json")]),s._v("文件，则会加载该目录下的"),n("code",[s._v("index.js")]),s._v("文件或"),n("code",[s._v("index.node")]),s._v("文件。")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://nodejs.org/api/modules.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("具体可查阅nodeJS"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"五、扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、扩展"}},[s._v("#")]),s._v(" 五、扩展")]),s._v(" "),n("p",[s._v("前后端 JS 分别搁置在 HTTP 的两端，它们扮演的角色不同，侧重点也不一样。 "),n("strong",[s._v("浏览器端的 JS 需要经历从一个服务器端分发到多个客户端执行，而服务器端 JS 则是相同的代码需要多次执行。前者的瓶颈在于宽带，后者的瓶颈则在于 CPU 等内存资源。前者需要通过网络加载代码，后者则需要从磁盘中加载，")]),s._v(" 两者的加载速度也不是在一个数量级上的。\n纵观 Node 的模块引入过程，几乎全都是同步的，尽管与 Node 强调异步的行为有些相反，但它是合理的，但前端如果也用同步方式引入，试想一下，在 UI 加载的过程中需要花费很多时间来等待脚本加载完成，这会造成用户体验的很大问题。\n鉴于网络的原因， CommonJS 为后端 JS 制定的规范并不完全适合与前端的应用场景，下面来介绍 JS 前端的规范。")]),s._v(" "),n("h3",{attrs:{id:"_1-amd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-amd"}},[s._v("#")]),s._v(" 1. AMD")]),s._v(" "),n("p",[s._v('AMD是由RequireJS提出的，相对于CommonJS同步加载来说，AMD是"Asynchronous Module Definition"（异步模块定义）的缩写。是为浏览器环境专门设计的。')]),s._v(" "),n("p",[s._v("RequireJS即为遵循AMD规范的模块化工具。 RequireJS的基本思想是，通过一个函数来将所有所需要的或者说所依赖的模块实现装载进来，然后返回一个新的函数（模块），我们所有的关于新模块的业务代码都在这个函数内部操作，其内部也可无限制的使用已经加载进来的以来的模块。")]),s._v(" "),n("p",[n("strong",[s._v("define(id?, dependencies?, factory)")])]),s._v(" "),n("ul",[n("li",[s._v("id 为字符串类型，表示了模块标识，为可选参数。若不存在则模块标识应该默认定义为在加载器中被请求脚本的标识。如果存在，那么模块标识必须为顶层的或者一个绝对的标识。 第")]),s._v(" "),n("li",[s._v("dependencies ，是一个当前模块依赖的，已被模块定义的模块标识的数组字面量。")]),s._v(" "),n("li",[s._v("factory，是一个需要进行实例化的函数或者一个对象。")])]),s._v(" "),n("ol",[n("li",[n("p",[s._v("定义模块")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("定义无依赖模块")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("define( {\n    sum : function( x, y ){\n        return x + y ;\n    }\n} );\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("定义有依赖模块")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('define(["some"], function( alpha ){\n    return {\n        add : function(){\n            return some.sum() + 1 ;\n        }\n    }\n});\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("定义数据对象模块")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("define({\n    add: [],\n    sub: []\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("具名模块")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('define("alpha", [ "require", "exports", "beta" ], function( require, exports, beta ){\n    export.verb = function(){\n        return beta.verb();\n        // or:\n        return require("beta").verb();\n    }\n});\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("包装模块")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("define(function(require, exports, module) {\n    var a = require('a'),\n          b = require('b');\n\n    exports.action = function() {};\n} );\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("不考虑多了一层函数外，格式和Node.js是一样的：使用require获取依赖模块，使用exports导出API。")]),s._v(" "),n("p",[s._v("除了define外，AMD还保留一个关键字require。require 作为规范保留的全局标识符，可以实现为 module loader，也可以不实现。")])])])]),s._v(" "),n("li",[n("p",[s._v("模块加载")]),s._v(" "),n("p",[n("strong",[s._v("require([module], callback)")])]),s._v(" "),n("ul",[n("li",[s._v("[module]：是一个数组，里面的成员就是要加载的模块")]),s._v(" "),n("li",[s._v("callback：是模块加载完成之后的回调函数")]),s._v(" "),n("li",[s._v("require方法允许添加第三个参数，即错误处理的回调函数。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("require(['math'], function(math) {\n　math.add(2, 3);\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])])]),s._v(" "),n("h3",{attrs:{id:"_2-cmd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-cmd"}},[s._v("#")]),s._v(" 2. CMD")]),s._v(" "),n("p",[s._v("CMD 的规范由国内的玉伯提出，与 AMD 的区别主要在于 "),n("strong",[s._v("定义模块与依赖引入")]),s._v(" 的部分。")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("CMD 更接近与 Node 对 CommonJS 规范的定义：")]),s._v(" "),n("p",[n("strong",[s._v("define(factory)")])])]),s._v(" "),n("li",[n("p",[s._v("在依赖部分，CMD 支持动态引入")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("define(function(require, exports, module) {\n    // 模块内容\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("require、exports、module 通过形参传递给模块，在需要依赖模块时，可以通过 "),n("code",[s._v("require()")]),s._v(" 引入。")])])]),s._v(" "),n("h3",{attrs:{id:"_3-es6-模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-es6-模块化"}},[s._v("#")]),s._v(" 3. ES6 模块化")]),s._v(" "),n("p",[s._v("ES6正式提出了内置的模块化语法。")]),s._v(" "),n("p",[s._v("ES6 的模块自动采用严格模式，不管你有没有在模块头部加上"),n("code",[s._v('"use strict";')]),s._v("。")]),s._v(" "),n("p",[s._v("模块功能主要由两个命令构成："),n("code",[s._v("export")]),s._v("和"),n("code",[s._v("import")]),s._v("。"),n("code",[s._v("export")]),s._v("命令用于规定模块的对外接口，"),n("code",[s._v("import")]),s._v("命令用于输入其他模块提供的功能。")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("export")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//导出变量\nexport var a = 1;\n\n//导出函数\nexport function fun(){\n   ...\n}\n\n//导出类\nexport class Rectangle {\n    ...\n}\n\nfunction fun1() { ... }\nfunction fun2() { ... }\n//导出对象，即导出引用\nexport {fun1 as f1, fun2 as f2} // 重命名模块\n\n// 导出默认值\nexport default function fun3() { ... }\n\n// 错误, 后面不能跟变量声明语句。\nexport default var a = 1\n\n// 正确                                \nexport default 42\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("另外，"),n("code",[s._v("export")]),s._v("语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export var foo = 'bar';\nsetTimeout(() => foo = 'baz', 500);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面代码输出变量"),n("code",[s._v("foo")]),s._v("，值为"),n("code",[s._v("bar")]),s._v("，500毫秒之后变成"),n("code",[s._v("baz")]),s._v("。")])]),s._v(" "),n("li",[n("p",[s._v("import")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 第一组 example.js\nexport default function fun() { // 输出\n  // ...\n}\n// app.js\nimport fun from './example';\n\n// 第二组 example.js\nexport function fun() { // 输出\n  // ...\n};\n// app.js\nimport {fun} from './example'; // 输入\n// 或\nimport * as allFun from './example';\n//allFun.fun\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[n("code",[s._v("export default")]),s._v("命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此"),n("code",[s._v("export default")]),s._v("命令只能使用一次。所以，"),n("code",[s._v("import")]),s._v("命令后面才不用加大括号，因为只可能对应一个方法。")]),s._v(" "),n("p",[s._v("本质上，"),n("code",[s._v("export default")]),s._v("就是输出一个叫做"),n("code",[s._v("default")]),s._v("的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// modules.js\nfunction fun() {\n  ...\n}\nexport {fun as default};\n// 等同于\n// export default fun;\n\n// app.js\nimport { default as fun } from './modules';\n// 等同于\n// import fun from 'modules';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("CommonJS")]),s._v("和ES6中模块化的两者区别")]),s._v(" "),n("ul",[n("li",[s._v("前者支持动态导入，也就是 "),n("code",[s._v("require(${path}/xx.js)")]),s._v("，后者目前不支持，但是已有提案")]),s._v(" "),n("li",[s._v("前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响")]),s._v(" "),n("li",[s._v("前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化")]),s._v(" "),n("li",[s._v("后者会编译成 "),n("code",[s._v("require/exports")]),s._v(" 来执行的")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);